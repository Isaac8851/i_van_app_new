# Set minimum iOS version
platform :ios, '15.0'

# Disable CocoaPods analytics
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug'   => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  # Build path: ../Flutter/Generated.xcconfig
  generated_xcconfig = File.join('..', 'Flutter', 'Generated.xcconfig')
  full_path = File.expand_path(generated_xcconfig, __FILE__)
  unless File.exist?(full_path)
    raise "#{full_path} must exist. Run 'flutter pub get' first."
  end

  File.foreach(full_path) do |line|
    if line =~ /FLUTTER_ROOT\=(.*)/
      return $1.strip
    end
  end
  raise "FLUTTER_ROOT not found in #{full_path}"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!                # enables Swift pods
  use_modular_headers!          # re-enable for Firebase compatibility

  flutter_install_all_ios_pods(File.dirname(File.realpath(__FILE__)))

  target 'RunnerTests' do
    inherit! :search_paths
  end
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    # 1️⃣ Apply Flutter's iOS settings
    flutter_additional_ios_build_settings(target)

    # 2️⃣ Per-configuration adjustments
    target.build_configurations.each do |config|
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.0'
      config.build_settings['ENABLE_BITCODE']            = 'NO'
      config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
      config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'c++17'
      config.build_settings['CLANG_CXX_LIBRARY']           = 'libc++'
    end

    # 3️⃣ Handle gRPC and BoringSSL compiler flags
    if ['gRPC-Core', 'gRPC-C++', 'BoringSSL-GRPC'].include?(target.name)
      target.build_configurations.each do |config|
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
        config.build_settings['WARNING_CFLAGS'] ||= ['$(inherited)']
        config.build_settings['OTHER_CFLAGS'] = '$(inherited) -Wno-comma -Wno-shorten-64-to-32 -Wno-unreachable-code -Wno-conditional-uninitialized -Wno-deprecated-declarations'
        
        # Remove problematic compiler flags
        if config.build_settings['COMPILER_FLAGS']
          flags = config.build_settings['COMPILER_FLAGS'].split
          flags.reject! { |flag| flag.start_with?('-G') }
          config.build_settings['COMPILER_FLAGS'] = flags.join(' ')
        end
      end
    end
  end
end
